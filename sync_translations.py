from collections import defaultdict
import fileinput
import re
import os.path
import uuid

filenames = [
  "mem-01-b.xml",
  "mem-02-ch.xml",
  "mem-03-D.xml",
  "mem-04-gh.xml",
  "mem-05-H.xml",
  "mem-06-j.xml",
  "mem-07-l.xml",
  "mem-08-m.xml",
  "mem-09-n.xml",
  "mem-10-ng.xml",
  "mem-11-p.xml",
  "mem-12-q.xml",
  "mem-13-Q.xml",
  "mem-14-r.xml",
  "mem-15-S.xml",
  "mem-16-t.xml",
  "mem-17-tlh.xml",
  "mem-18-v.xml",
  "mem-19-w.xml",
  "mem-20-y.xml",
  "mem-21-a.xml",
  "mem-22-e.xml",
  "mem-23-I.xml",
  "mem-24-o.xml",
  "mem-25-u.xml",
  "mem-26-suffixes.xml",
  "mem-27-extra.xml",
  "mem-28-examples.xml"
]

mixins = {
    "de": defaultdict(list),
    "fa": defaultdict(list),
    "fi": defaultdict(list),
    "pt": defaultdict(list),
    "ru": defaultdict(list),
    "sv": defaultdict(list),
    "zh_HK": defaultdict(list),
}

lang_regex = "(?:" + "|".join(mixins.keys()) + ")"

comment_fields = defaultdict(dict)

uid_order = defaultdict(list) # spare the order of words so that the mixins can be ordered in the same way

# go over each word, add uids and move translations to mixins
uid = None
for filename in filenames:
  with fileinput.FileInput(filename, inplace=True) as file:
    while True:
        try:
            line = next(file)
        except StopIteration:
            break

        if '<table name="mem">' in line:
            uid = uuid.uuid4()
            print(line.replace('<table name="mem">', f'<table name="mem" uid="{uid}">'), end="")
            uid_order[filename].append(uid)
            continue
        
        elif m := re.search(r'<table name="mem" uid="([a-z0-9-]*)">', line):
            uid = m.group(1)
            print(line, end="")
            uid_order[filename].append(uid)
            continue
        
        if m := re.search(rf'<column name="(definition|notes|examples|search_tags)_({lang_regex})">', line):
            lang = m.group(2)
            assert uid
            mixins[lang][uid].append(line)
            while "</column>" not in line:
                line = next(file)
                mixins[lang][uid].append(line)
            continue
        
        if m := re.search(rf'<column name="(entry_name|part_of_speech)">(.*)</column>', line):
            field = m.group(1)
            value = m.group(2)
            assert uid
            comment_fields[uid][field] = value

        print(line, end="")

def print_mixin(file, lang, uid, lines):
    print(f'  <mixin target="{uid}">', file=file)
    for field, value in comment_fields[uid].items():
        print(f"    <!-- (G) {field}: {value} -->", file=file)
    for column in ["definition", "notes", "examples", "search_tags"]:
        if not any(f'<column name="{column}_{lang}">' in line for line in lines):
            print(f'    <column name="{column}_{lang}"></column>', file=file)
    for line in lines:
        if line.strip().startswith("<"):
            print("    " + line.strip(), file=file)
        else:
            print(line.strip("\n"), file=file)
    print("  </mixin>", file=file)

# read existing mixins
uid = None
for lang in mixins.keys():
    for filename in filenames:
        path = os.path.join(lang, filename)
        if not os.path.exists(path):
            continue

        with open(path, "r") as file:
            for line in file:
                if m := re.search(rf'<mixin target="([a-z0-9-]*)">', line):
                    uid = m.group(1)
                    mixins[lang][uid] = []
                    continue

                elif re.search(r"</mixin>|<\?xml|<mixins>|</mixins>", line):
                    uid = None
                    continue
                
                elif "(G)" not in line:
                    assert uid
                    mixins[lang][uid].append(line)
                    continue

                else:
                    # This is an autogenerated line and will be removed
                    continue

# write mixins
for lang in mixins.keys():
    for filename in filenames:
        with open(os.path.join(lang, filename), "w") as file:
            print('<?xml version="1.0" encoding="UTF-8"?>', file=file)
            print('<mixins>', file=file)
            for uid in uid_order[filename]:
                if uid in mixins[lang]:
                    print_mixin(file, lang, uid, mixins[lang][uid])
            
            print('</mixins>', file=file)